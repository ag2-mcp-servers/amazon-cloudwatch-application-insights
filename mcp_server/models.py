# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:40:02+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AffectedResource(RootModel[str]):
    root: str


class AmazonResourceName(
    RootModel[
        constr(
            pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
        min_length=1,
        max_length=1011,
    )


class AutoConfigEnabled(RootModel[bool]):
    root: bool


class AutoCreate(RootModel[bool]):
    root: bool


class BadRequestException(RootModel[Any]):
    root: Any


class CWEMonitorEnabled(RootModel[bool]):
    root: bool


class CloudWatchEventDetailType(RootModel[str]):
    root: str


class CloudWatchEventId(RootModel[str]):
    root: str


class CloudWatchEventSource(Enum):
    EC2 = 'EC2'
    CODE_DEPLOY = 'CODE_DEPLOY'
    HEALTH = 'HEALTH'
    RDS = 'RDS'


class CodeDeployApplication(RootModel[str]):
    root: str


class CodeDeployDeploymentGroup(RootModel[str]):
    root: str


class CodeDeployDeploymentId(RootModel[str]):
    root: str


class CodeDeployInstanceGroupId(RootModel[str]):
    root: str


class CodeDeployState(RootModel[str]):
    root: str


class ComponentConfiguration(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=10000)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=10000)


class ComponentName(
    RootModel[
        constr(
            pattern=r'(?:^[\d\w\-_\.+]*$)|(?:^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$)',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'(?:^[\d\w\-_\.+]*$)|(?:^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$)',
        min_length=1,
        max_length=1011,
    )


class ConfigurationEventDetail(RootModel[str]):
    root: str


class ConfigurationEventMonitoredResourceARN(RootModel[str]):
    root: str


class ConfigurationEventResourceName(RootModel[str]):
    root: str


class ConfigurationEventResourceType(Enum):
    CLOUDWATCH_ALARM = 'CLOUDWATCH_ALARM'
    CLOUDWATCH_LOG = 'CLOUDWATCH_LOG'
    CLOUDFORMATION = 'CLOUDFORMATION'
    SSM_ASSOCIATION = 'SSM_ASSOCIATION'


class ConfigurationEventStatus(Enum):
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'


class ConfigurationEventTime(RootModel[datetime]):
    root: datetime


class CreateComponentResponse(BaseModel):
    pass


class CustomComponentName(
    RootModel[constr(pattern=r'^[\d\w\-_\.+]*$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[\d\w\-_\.+]*$', min_length=1, max_length=128)


class DeleteApplicationResponse(BaseModel):
    pass


class DeleteComponentResponse(BaseModel):
    pass


class DeleteLogPatternResponse(BaseModel):
    pass


class DescribeComponentConfigurationRecommendationResponse(BaseModel):
    ComponentConfiguration_1: Optional[ComponentConfiguration] = Field(
        None, alias='ComponentConfiguration'
    )


class DiscoveryType(Enum):
    RESOURCE_GROUP_BASED = 'RESOURCE_GROUP_BASED'
    ACCOUNT_BASED = 'ACCOUNT_BASED'


class EbsCause(RootModel[str]):
    root: str


class EbsEvent(RootModel[str]):
    root: str


class EbsRequestId(RootModel[str]):
    root: str


class EbsResult(RootModel[str]):
    root: str


class Ec2State(RootModel[str]):
    root: str


class EndTime(RootModel[datetime]):
    root: datetime


class FeedbackKey(Enum):
    INSIGHTS_FEEDBACK = 'INSIGHTS_FEEDBACK'


class FeedbackValue(Enum):
    NOT_SPECIFIED = 'NOT_SPECIFIED'
    USEFUL = 'USEFUL'
    NOT_USEFUL = 'NOT_USEFUL'


class GroupingType(Enum):
    ACCOUNT_BASED = 'ACCOUNT_BASED'


class HealthEventArn(RootModel[str]):
    root: str


class HealthEventDescription(RootModel[str]):
    root: str


class HealthEventTypeCategory(RootModel[str]):
    root: str


class HealthEventTypeCode(RootModel[str]):
    root: str


class HealthService(RootModel[str]):
    root: str


class Insights(RootModel[str]):
    root: str


class InternalServerException(RootModel[Any]):
    root: Any


class LastRecurrenceTime(RootModel[datetime]):
    root: datetime


class LifeCycle(RootModel[str]):
    root: str


class LineTime(RootModel[datetime]):
    root: datetime


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class LogFilter(Enum):
    ERROR = 'ERROR'
    WARN = 'WARN'
    INFO = 'INFO'


class LogGroup(RootModel[str]):
    root: str


class LogPatternName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=50)


class LogPatternRank(RootModel[int]):
    root: int


class LogPatternRegex(
    RootModel[constr(pattern=r'[\S\s]+', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[\S\s]+', min_length=1, max_length=50)


class LogPatternSetName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=30)


class LogText(RootModel[str]):
    root: str


class MaxEntities(RootModel[conint(ge=1, le=40)]):
    root: conint(ge=1, le=40)


class MetaDataKey(RootModel[str]):
    root: str


class MetaDataValue(RootModel[str]):
    root: str


class MetricName(RootModel[str]):
    root: str


class MetricNamespace(RootModel[str]):
    root: str


class Monitor(RootModel[bool]):
    root: bool


class ObservationId(
    RootModel[
        constr(
            pattern=r'o-[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}',
            min_length=38,
            max_length=38,
        )
    ]
):
    root: constr(
        pattern=r'o-[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}',
        min_length=38,
        max_length=38,
    )


class OpsCenterEnabled(RootModel[bool]):
    root: bool


class OpsItemSNSTopicArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
            min_length=20,
            max_length=300,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
        min_length=20,
        max_length=300,
    )


class OsType(Enum):
    WINDOWS = 'WINDOWS'
    LINUX = 'LINUX'


class PaginationToken(RootModel[constr(pattern=r'.+', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.+', min_length=1, max_length=1024)


class ProblemId(
    RootModel[
        constr(
            pattern=r'p-[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}',
            min_length=38,
            max_length=38,
        )
    ]
):
    root: constr(
        pattern=r'p-[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}',
        min_length=38,
        max_length=38,
    )


class RdsEventCategories(RootModel[str]):
    root: str


class RdsEventMessage(RootModel[str]):
    root: str


class RecurringCount(RootModel[int]):
    root: int


class Remarks(RootModel[str]):
    root: str


class RemoveSNSTopic(RootModel[bool]):
    root: bool


class ResourceARN(
    RootModel[
        constr(
            pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-\w+)*:[\w\d-]+:([\w\d-]*)?:[\w\d_-]*([:/].+)*$',
        min_length=1,
        max_length=1011,
    )


class ResourceGroupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\-_]*', min_length=1, max_length=256)


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceList(RootModel[List[ResourceARN]]):
    root: List[ResourceARN]


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(
    RootModel[constr(pattern=r'[0-9a-zA-Z:_]*', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[0-9a-zA-Z:_]*', min_length=1, max_length=50)


class S3EventName(RootModel[str]):
    root: str


class SeverityLevel(Enum):
    Informative = 'Informative'
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class SourceARN(RootModel[str]):
    root: str


class SourceType(RootModel[str]):
    root: str


class StartTime(RootModel[datetime]):
    root: datetime


class StatesArn(RootModel[str]):
    root: str


class StatesExecutionArn(RootModel[str]):
    root: str


class StatesInput(RootModel[str]):
    root: str


class StatesStatus(RootModel[str]):
    root: str


class Status(Enum):
    IGNORE = 'IGNORE'
    RESOLVED = 'RESOLVED'
    PENDING = 'PENDING'
    RECURRING = 'RECURRING'


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TagsAlreadyExistException(RootModel[Any]):
    root: Any


class Tier(Enum):
    CUSTOM = 'CUSTOM'
    DEFAULT = 'DEFAULT'
    DOT_NET_CORE = 'DOT_NET_CORE'
    DOT_NET_WORKER = 'DOT_NET_WORKER'
    DOT_NET_WEB_TIER = 'DOT_NET_WEB_TIER'
    DOT_NET_WEB = 'DOT_NET_WEB'
    SQL_SERVER = 'SQL_SERVER'
    SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP = 'SQL_SERVER_ALWAYSON_AVAILABILITY_GROUP'
    MYSQL = 'MYSQL'
    POSTGRESQL = 'POSTGRESQL'
    JAVA_JMX = 'JAVA_JMX'
    ORACLE = 'ORACLE'
    SAP_HANA_MULTI_NODE = 'SAP_HANA_MULTI_NODE'
    SAP_HANA_SINGLE_NODE = 'SAP_HANA_SINGLE_NODE'
    SAP_HANA_HIGH_AVAILABILITY = 'SAP_HANA_HIGH_AVAILABILITY'
    SQL_SERVER_FAILOVER_CLUSTER_INSTANCE = 'SQL_SERVER_FAILOVER_CLUSTER_INSTANCE'
    SHAREPOINT = 'SHAREPOINT'
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'


class Title(RootModel[str]):
    root: str


class TooManyTagsException(RootModel[Any]):
    root: Any


class Unit(RootModel[str]):
    root: str


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateApplicationRequest(BaseModel):
    AutoConfigEnabled_1: Optional[AutoConfigEnabled] = Field(
        None, alias='AutoConfigEnabled'
    )
    CWEMonitorEnabled_1: Optional[CWEMonitorEnabled] = Field(
        None, alias='CWEMonitorEnabled'
    )
    OpsCenterEnabled_1: Optional[OpsCenterEnabled] = Field(
        None, alias='OpsCenterEnabled'
    )
    OpsItemSNSTopicArn_1: Optional[OpsItemSNSTopicArn] = Field(
        None, alias='OpsItemSNSTopicArn'
    )
    RemoveSNSTopic_1: Optional[RemoveSNSTopic] = Field(None, alias='RemoveSNSTopic')
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class UpdateComponentConfigurationRequest(BaseModel):
    AutoConfigEnabled_1: Optional[AutoConfigEnabled] = Field(
        None, alias='AutoConfigEnabled'
    )
    ComponentConfiguration_1: Optional[ComponentConfiguration] = Field(
        None, alias='ComponentConfiguration'
    )
    ComponentName_1: ComponentName = Field(..., alias='ComponentName')
    Monitor_1: Optional[Monitor] = Field(None, alias='Monitor')
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')
    Tier_1: Optional[Tier] = Field(None, alias='Tier')


class UpdateComponentConfigurationResponse(BaseModel):
    pass


class UpdateComponentRequest(BaseModel):
    ComponentName: CustomComponentName
    NewComponentName: Optional[CustomComponentName] = None
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')
    ResourceList_1: Optional[ResourceList] = Field(None, alias='ResourceList')


class UpdateComponentResponse(BaseModel):
    pass


class UpdateLogPatternRequest(BaseModel):
    Pattern: Optional[LogPatternRegex] = None
    PatternName: LogPatternName
    PatternSetName: LogPatternSetName
    Rank: Optional[LogPatternRank] = None
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class ValidationException(RootModel[Any]):
    root: Any


class Value(RootModel[float]):
    root: float


class WorkloadMetaData(RootModel[Optional[Dict[str, MetaDataValue]]]):
    root: Optional[Dict[str, MetaDataValue]] = None


class XRayErrorPercent(RootModel[int]):
    root: int


class XRayFaultPercent(RootModel[int]):
    root: int


class XRayNodeName(RootModel[str]):
    root: str


class XRayNodeType(RootModel[str]):
    root: str


class XRayRequestAverageLatency(RootModel[int]):
    root: int


class XRayRequestCount(RootModel[int]):
    root: int


class XRayThrottlePercent(RootModel[int]):
    root: int


class XAmzTarget(Enum):
    EC2WindowsBarleyService_CreateApplication = (
        'EC2WindowsBarleyService.CreateApplication'
    )


class XAmzTarget1(Enum):
    EC2WindowsBarleyService_CreateComponent = 'EC2WindowsBarleyService.CreateComponent'


class XAmzTarget2(Enum):
    EC2WindowsBarleyService_CreateLogPattern = (
        'EC2WindowsBarleyService.CreateLogPattern'
    )


class XAmzTarget3(Enum):
    EC2WindowsBarleyService_DeleteApplication = (
        'EC2WindowsBarleyService.DeleteApplication'
    )


class XAmzTarget4(Enum):
    EC2WindowsBarleyService_DeleteComponent = 'EC2WindowsBarleyService.DeleteComponent'


class XAmzTarget5(Enum):
    EC2WindowsBarleyService_DeleteLogPattern = (
        'EC2WindowsBarleyService.DeleteLogPattern'
    )


class XAmzTarget6(Enum):
    EC2WindowsBarleyService_DescribeApplication = (
        'EC2WindowsBarleyService.DescribeApplication'
    )


class XAmzTarget7(Enum):
    EC2WindowsBarleyService_DescribeComponent = (
        'EC2WindowsBarleyService.DescribeComponent'
    )


class XAmzTarget8(Enum):
    EC2WindowsBarleyService_DescribeComponentConfiguration = (
        'EC2WindowsBarleyService.DescribeComponentConfiguration'
    )


class XAmzTarget9(Enum):
    EC2WindowsBarleyService_DescribeComponentConfigurationRecommendation = (
        'EC2WindowsBarleyService.DescribeComponentConfigurationRecommendation'
    )


class XAmzTarget10(Enum):
    EC2WindowsBarleyService_DescribeLogPattern = (
        'EC2WindowsBarleyService.DescribeLogPattern'
    )


class XAmzTarget11(Enum):
    EC2WindowsBarleyService_DescribeObservation = (
        'EC2WindowsBarleyService.DescribeObservation'
    )


class XAmzTarget12(Enum):
    EC2WindowsBarleyService_DescribeProblem = 'EC2WindowsBarleyService.DescribeProblem'


class XAmzTarget13(Enum):
    EC2WindowsBarleyService_DescribeProblemObservations = (
        'EC2WindowsBarleyService.DescribeProblemObservations'
    )


class XAmzTarget14(Enum):
    EC2WindowsBarleyService_ListApplications = (
        'EC2WindowsBarleyService.ListApplications'
    )


class XAmzTarget15(Enum):
    EC2WindowsBarleyService_ListComponents = 'EC2WindowsBarleyService.ListComponents'


class XAmzTarget16(Enum):
    EC2WindowsBarleyService_ListConfigurationHistory = (
        'EC2WindowsBarleyService.ListConfigurationHistory'
    )


class XAmzTarget17(Enum):
    EC2WindowsBarleyService_ListLogPatternSets = (
        'EC2WindowsBarleyService.ListLogPatternSets'
    )


class XAmzTarget18(Enum):
    EC2WindowsBarleyService_ListLogPatterns = 'EC2WindowsBarleyService.ListLogPatterns'


class XAmzTarget19(Enum):
    EC2WindowsBarleyService_ListProblems = 'EC2WindowsBarleyService.ListProblems'


class XAmzTarget20(Enum):
    EC2WindowsBarleyService_ListTagsForResource = (
        'EC2WindowsBarleyService.ListTagsForResource'
    )


class XAmzTarget21(Enum):
    EC2WindowsBarleyService_TagResource = 'EC2WindowsBarleyService.TagResource'


class XAmzTarget22(Enum):
    EC2WindowsBarleyService_UntagResource = 'EC2WindowsBarleyService.UntagResource'


class XAmzTarget23(Enum):
    EC2WindowsBarleyService_UpdateApplication = (
        'EC2WindowsBarleyService.UpdateApplication'
    )


class XAmzTarget24(Enum):
    EC2WindowsBarleyService_UpdateComponent = 'EC2WindowsBarleyService.UpdateComponent'


class XAmzTarget25(Enum):
    EC2WindowsBarleyService_UpdateComponentConfiguration = (
        'EC2WindowsBarleyService.UpdateComponentConfiguration'
    )


class XAmzTarget26(Enum):
    EC2WindowsBarleyService_UpdateLogPattern = (
        'EC2WindowsBarleyService.UpdateLogPattern'
    )


class ApplicationInfo(BaseModel):
    AutoConfigEnabled_1: Optional[AutoConfigEnabled] = Field(
        None, alias='AutoConfigEnabled'
    )
    CWEMonitorEnabled_1: Optional[CWEMonitorEnabled] = Field(
        None, alias='CWEMonitorEnabled'
    )
    DiscoveryType_1: Optional[DiscoveryType] = Field(None, alias='DiscoveryType')
    LifeCycle_1: Optional[LifeCycle] = Field(None, alias='LifeCycle')
    OpsCenterEnabled_1: Optional[OpsCenterEnabled] = Field(
        None, alias='OpsCenterEnabled'
    )
    OpsItemSNSTopicArn_1: Optional[OpsItemSNSTopicArn] = Field(
        None, alias='OpsItemSNSTopicArn'
    )
    Remarks_1: Optional[Remarks] = Field(None, alias='Remarks')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class ApplicationInfoList(RootModel[List[ApplicationInfo]]):
    root: List[ApplicationInfo]


class ConfigurationEvent(BaseModel):
    EventDetail: Optional[ConfigurationEventDetail] = None
    EventResourceName: Optional[ConfigurationEventResourceName] = None
    EventResourceType: Optional[ConfigurationEventResourceType] = None
    EventStatus: Optional[ConfigurationEventStatus] = None
    EventTime: Optional[ConfigurationEventTime] = None
    MonitoredResourceARN: Optional[ConfigurationEventMonitoredResourceARN] = None


class ConfigurationEventList(RootModel[List[ConfigurationEvent]]):
    root: List[ConfigurationEvent]


class CreateApplicationResponse(BaseModel):
    ApplicationInfo_1: Optional[ApplicationInfo] = Field(None, alias='ApplicationInfo')


class CreateComponentRequest(BaseModel):
    ComponentName: CustomComponentName
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')
    ResourceList_1: ResourceList = Field(..., alias='ResourceList')


class CreateLogPatternRequest(BaseModel):
    Pattern: LogPatternRegex
    PatternName: LogPatternName
    PatternSetName: LogPatternSetName
    Rank: LogPatternRank
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DeleteApplicationRequest(BaseModel):
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DeleteComponentRequest(BaseModel):
    ComponentName: CustomComponentName
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DeleteLogPatternRequest(BaseModel):
    PatternName: LogPatternName
    PatternSetName: LogPatternSetName
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DescribeApplicationRequest(BaseModel):
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DescribeApplicationResponse(BaseModel):
    ApplicationInfo_1: Optional[ApplicationInfo] = Field(None, alias='ApplicationInfo')


class DescribeComponentConfigurationRecommendationRequest(BaseModel):
    ComponentName_1: ComponentName = Field(..., alias='ComponentName')
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')
    Tier_1: Tier = Field(..., alias='Tier')


class DescribeComponentConfigurationRequest(BaseModel):
    ComponentName_1: ComponentName = Field(..., alias='ComponentName')
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DescribeComponentConfigurationResponse(BaseModel):
    ComponentConfiguration_1: Optional[ComponentConfiguration] = Field(
        None, alias='ComponentConfiguration'
    )
    Monitor_1: Optional[Monitor] = Field(None, alias='Monitor')
    Tier_1: Optional[Tier] = Field(None, alias='Tier')


class DescribeComponentRequest(BaseModel):
    ComponentName_1: ComponentName = Field(..., alias='ComponentName')
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DescribeLogPatternRequest(BaseModel):
    PatternName: LogPatternName
    PatternSetName: LogPatternSetName
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class DescribeObservationRequest(BaseModel):
    ObservationId_1: ObservationId = Field(..., alias='ObservationId')


class DescribeProblemObservationsRequest(BaseModel):
    ProblemId_1: ProblemId = Field(..., alias='ProblemId')


class DescribeProblemRequest(BaseModel):
    ProblemId_1: ProblemId = Field(..., alias='ProblemId')


class DetectedWorkload(RootModel[Optional[Dict[str, WorkloadMetaData]]]):
    root: Optional[Dict[str, WorkloadMetaData]] = None


class Feedback(RootModel[Optional[Dict[str, FeedbackValue]]]):
    root: Optional[Dict[str, FeedbackValue]] = None


class ListApplicationsRequest(BaseModel):
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None


class ListApplicationsResponse(BaseModel):
    ApplicationInfoList_1: Optional[ApplicationInfoList] = Field(
        None, alias='ApplicationInfoList'
    )
    NextToken: Optional[PaginationToken] = None


class ListComponentsRequest(BaseModel):
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class ListConfigurationHistoryRequest(BaseModel):
    EndTime_1: Optional[EndTime] = Field(None, alias='EndTime')
    EventStatus: Optional[ConfigurationEventStatus] = None
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')


class ListConfigurationHistoryResponse(BaseModel):
    EventList: Optional[ConfigurationEventList] = None
    NextToken: Optional[PaginationToken] = None


class ListLogPatternSetsRequest(BaseModel):
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class ListLogPatternsRequest(BaseModel):
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None
    PatternSetName: Optional[LogPatternSetName] = None
    ResourceGroupName_1: ResourceGroupName = Field(..., alias='ResourceGroupName')


class ListProblemsRequest(BaseModel):
    ComponentName_1: Optional[ComponentName] = Field(None, alias='ComponentName')
    EndTime_1: Optional[EndTime] = Field(None, alias='EndTime')
    MaxResults: Optional[MaxEntities] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')


class LogPattern(BaseModel):
    Pattern: Optional[LogPatternRegex] = None
    PatternName: Optional[LogPatternName] = None
    PatternSetName: Optional[LogPatternSetName] = None
    Rank: Optional[LogPatternRank] = None


class LogPatternList(RootModel[List[LogPattern]]):
    root: List[LogPattern]


class LogPatternSetList(RootModel[List[LogPatternSetName]]):
    root: List[LogPatternSetName]


class Observation(BaseModel):
    CloudWatchEventDetailType_1: Optional[CloudWatchEventDetailType] = Field(
        None, alias='CloudWatchEventDetailType'
    )
    CloudWatchEventId_1: Optional[CloudWatchEventId] = Field(
        None, alias='CloudWatchEventId'
    )
    CloudWatchEventSource_1: Optional[CloudWatchEventSource] = Field(
        None, alias='CloudWatchEventSource'
    )
    CodeDeployApplication_1: Optional[CodeDeployApplication] = Field(
        None, alias='CodeDeployApplication'
    )
    CodeDeployDeploymentGroup_1: Optional[CodeDeployDeploymentGroup] = Field(
        None, alias='CodeDeployDeploymentGroup'
    )
    CodeDeployDeploymentId_1: Optional[CodeDeployDeploymentId] = Field(
        None, alias='CodeDeployDeploymentId'
    )
    CodeDeployInstanceGroupId_1: Optional[CodeDeployInstanceGroupId] = Field(
        None, alias='CodeDeployInstanceGroupId'
    )
    CodeDeployState_1: Optional[CodeDeployState] = Field(None, alias='CodeDeployState')
    EbsCause_1: Optional[EbsCause] = Field(None, alias='EbsCause')
    EbsEvent_1: Optional[EbsEvent] = Field(None, alias='EbsEvent')
    EbsRequestId_1: Optional[EbsRequestId] = Field(None, alias='EbsRequestId')
    EbsResult_1: Optional[EbsResult] = Field(None, alias='EbsResult')
    Ec2State_1: Optional[Ec2State] = Field(None, alias='Ec2State')
    EndTime_1: Optional[EndTime] = Field(None, alias='EndTime')
    HealthEventArn_1: Optional[HealthEventArn] = Field(None, alias='HealthEventArn')
    HealthEventDescription_1: Optional[HealthEventDescription] = Field(
        None, alias='HealthEventDescription'
    )
    HealthEventTypeCategory_1: Optional[HealthEventTypeCategory] = Field(
        None, alias='HealthEventTypeCategory'
    )
    HealthEventTypeCode_1: Optional[HealthEventTypeCode] = Field(
        None, alias='HealthEventTypeCode'
    )
    HealthService_1: Optional[HealthService] = Field(None, alias='HealthService')
    Id: Optional[ObservationId] = None
    LineTime_1: Optional[LineTime] = Field(None, alias='LineTime')
    LogFilter_1: Optional[LogFilter] = Field(None, alias='LogFilter')
    LogGroup_1: Optional[LogGroup] = Field(None, alias='LogGroup')
    LogText_1: Optional[LogText] = Field(None, alias='LogText')
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    MetricNamespace_1: Optional[MetricNamespace] = Field(None, alias='MetricNamespace')
    RdsEventCategories_1: Optional[RdsEventCategories] = Field(
        None, alias='RdsEventCategories'
    )
    RdsEventMessage_1: Optional[RdsEventMessage] = Field(None, alias='RdsEventMessage')
    S3EventName_1: Optional[S3EventName] = Field(None, alias='S3EventName')
    SourceARN_1: Optional[SourceARN] = Field(None, alias='SourceARN')
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')
    StatesArn_1: Optional[StatesArn] = Field(None, alias='StatesArn')
    StatesExecutionArn_1: Optional[StatesExecutionArn] = Field(
        None, alias='StatesExecutionArn'
    )
    StatesInput_1: Optional[StatesInput] = Field(None, alias='StatesInput')
    StatesStatus_1: Optional[StatesStatus] = Field(None, alias='StatesStatus')
    Unit_1: Optional[Unit] = Field(None, alias='Unit')
    Value_1: Optional[Value] = Field(None, alias='Value')
    XRayErrorPercent_1: Optional[XRayErrorPercent] = Field(
        None, alias='XRayErrorPercent'
    )
    XRayFaultPercent_1: Optional[XRayFaultPercent] = Field(
        None, alias='XRayFaultPercent'
    )
    XRayNodeName_1: Optional[XRayNodeName] = Field(None, alias='XRayNodeName')
    XRayNodeType_1: Optional[XRayNodeType] = Field(None, alias='XRayNodeType')
    XRayRequestAverageLatency_1: Optional[XRayRequestAverageLatency] = Field(
        None, alias='XRayRequestAverageLatency'
    )
    XRayRequestCount_1: Optional[XRayRequestCount] = Field(
        None, alias='XRayRequestCount'
    )
    XRayThrottlePercent_1: Optional[XRayThrottlePercent] = Field(
        None, alias='XRayThrottlePercent'
    )


class ObservationList(RootModel[List[Observation]]):
    root: List[Observation]


class Problem(BaseModel):
    AffectedResource_1: Optional[AffectedResource] = Field(
        None, alias='AffectedResource'
    )
    EndTime_1: Optional[EndTime] = Field(None, alias='EndTime')
    Feedback_1: Optional[Feedback] = Field(None, alias='Feedback')
    Id: Optional[ProblemId] = None
    Insights_1: Optional[Insights] = Field(None, alias='Insights')
    LastRecurrenceTime_1: Optional[LastRecurrenceTime] = Field(
        None, alias='LastRecurrenceTime'
    )
    RecurringCount_1: Optional[RecurringCount] = Field(None, alias='RecurringCount')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )
    SeverityLevel_1: Optional[SeverityLevel] = Field(None, alias='SeverityLevel')
    StartTime_1: Optional[StartTime] = Field(None, alias='StartTime')
    Status_1: Optional[Status] = Field(None, alias='Status')
    Title_1: Optional[Title] = Field(None, alias='Title')


class ProblemList(RootModel[List[Problem]]):
    root: List[Problem]


class RelatedObservations(BaseModel):
    ObservationList_1: Optional[ObservationList] = Field(None, alias='ObservationList')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class UpdateApplicationResponse(BaseModel):
    ApplicationInfo_1: Optional[ApplicationInfo] = Field(None, alias='ApplicationInfo')


class UpdateLogPatternResponse(BaseModel):
    LogPattern_1: Optional[LogPattern] = Field(None, alias='LogPattern')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class ApplicationComponent(BaseModel):
    ComponentName_1: Optional[ComponentName] = Field(None, alias='ComponentName')
    ComponentRemarks: Optional[Remarks] = None
    DetectedWorkload_1: Optional[DetectedWorkload] = Field(
        None, alias='DetectedWorkload'
    )
    Monitor_1: Optional[Monitor] = Field(None, alias='Monitor')
    OsType_1: Optional[OsType] = Field(None, alias='OsType')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    Tier_1: Optional[Tier] = Field(None, alias='Tier')


class ApplicationComponentList(RootModel[List[ApplicationComponent]]):
    root: List[ApplicationComponent]


class CreateApplicationRequest(BaseModel):
    AutoConfigEnabled_1: Optional[AutoConfigEnabled] = Field(
        None, alias='AutoConfigEnabled'
    )
    AutoCreate_1: Optional[AutoCreate] = Field(None, alias='AutoCreate')
    CWEMonitorEnabled_1: Optional[CWEMonitorEnabled] = Field(
        None, alias='CWEMonitorEnabled'
    )
    GroupingType_1: Optional[GroupingType] = Field(None, alias='GroupingType')
    OpsCenterEnabled_1: Optional[OpsCenterEnabled] = Field(
        None, alias='OpsCenterEnabled'
    )
    OpsItemSNSTopicArn_1: Optional[OpsItemSNSTopicArn] = Field(
        None, alias='OpsItemSNSTopicArn'
    )
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )
    Tags: Optional[TagList] = None


class CreateLogPatternResponse(BaseModel):
    LogPattern_1: Optional[LogPattern] = Field(None, alias='LogPattern')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class DescribeComponentResponse(BaseModel):
    ApplicationComponent_1: Optional[ApplicationComponent] = Field(
        None, alias='ApplicationComponent'
    )
    ResourceList_1: Optional[ResourceList] = Field(None, alias='ResourceList')


class DescribeLogPatternResponse(BaseModel):
    LogPattern_1: Optional[LogPattern] = Field(None, alias='LogPattern')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class DescribeObservationResponse(BaseModel):
    Observation_1: Optional[Observation] = Field(None, alias='Observation')


class DescribeProblemObservationsResponse(BaseModel):
    RelatedObservations_1: Optional[RelatedObservations] = Field(
        None, alias='RelatedObservations'
    )


class DescribeProblemResponse(BaseModel):
    Problem_1: Optional[Problem] = Field(None, alias='Problem')


class ListComponentsResponse(BaseModel):
    ApplicationComponentList_1: Optional[ApplicationComponentList] = Field(
        None, alias='ApplicationComponentList'
    )
    NextToken: Optional[PaginationToken] = None


class ListLogPatternSetsResponse(BaseModel):
    LogPatternSets: Optional[LogPatternSetList] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class ListLogPatternsResponse(BaseModel):
    LogPatterns: Optional[LogPatternList] = None
    NextToken: Optional[PaginationToken] = None
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class ListProblemsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    ProblemList_1: Optional[ProblemList] = Field(None, alias='ProblemList')
    ResourceGroupName_1: Optional[ResourceGroupName] = Field(
        None, alias='ResourceGroupName'
    )


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None
